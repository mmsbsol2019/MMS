import { Component, OnInit,Pipe,ViewChild  } from '@angular/core';
import {FormControl,FormGroup, Validators} from '@angular/forms';
import { LoginService } from "../login.service";
import { parse } from 'querystring';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { ElectronService } from 'ngx-electron';
import CONST from 'DBConnection/constants'
import { AfterViewInit } from '@angular/core/src/metadata/lifecycle_hooks';
import { ModalDirective } from 'angular-bootstrap-md';

//-----------------------------------For Modal Dropdown------------------------------
export interface CategoryOfNC {
  value: string;
  viewValue: string;
}

export interface MncNcObs {
  value: string;
  viewValue: string;
}
export interface CodeRefNC {
  value: string;
  viewValue: string;
}

export interface AcceptRevisedByCap {
  value: string;
  viewValue: string;
}

export interface RootCauseAnalysis {
  value: string;
  viewValue: string;
}

export interface Status {
  value: string;
  viewValue: string;
}
export interface Cause {
  value: string;
  viewValue: string;
}

//-----------------------------------For Modal Dropdown------------------------------ 

@Component({
  selector: 'app-deficiency-create',
  templateUrl: './deficiency-create.component.html',
  styleUrls: ['./deficiency-create.component.scss']
})
export class DeficiencyCreateComponent implements OnInit {

  //---------------Properties start ------------------------

  @ViewChild('auditCategoryModal') auditCategoryModal: ModalDirective;

  loggedInUser:string;
  checked = false;
  step = 0;
  defStatus:any;
  createDeficiency:any[];
  editDeficiency:any=[];

  auditCategory:any;
  auditCategoryName:any=[];
  vesselInfo:any;
  vesselInfo1:any;


  category_of_nc_opt:any;
  code_ref_of_nc_opt:any;
  mnc_nc_obs_opt:any;
  accept_revised_cap_by_auditor_opt:any;
  root_cause_analysis_opt:any
  cause_opt:any;
  status_opt:any;

  serialNo:any;
  flag:any;

  deficiencyData:any=[];
  nestedArray=[];
  editIndex:any;
  defHstryData:any;
  def_status:any;

  selectedAuditCategoryValue:string;
  
  public personCheckedIndex = -1;
  
//---------------Properties start ------------------------

 

  personCheckboxChange(event: MatCheckboxChange, index: number) {
  
    this.personCheckedIndex = event.checked ? index : -1;
    if(this.personCheckedIndex==index){
      this.flag=true;
    }
    else{
      this.flag=false;
    }
    
}


RowSelected(def:any,index:any)
{
 
    if(!def.isChecked){
      def.isChecked=true;
    }
    else if(def.isChecked){
      def.isChecked=false;
    }
    console.log(def.isChecked+"     -   "+def.serial_no);
    this.editIndex=index;
   // this.flag=def.isChecked;
    this.editDeficiency=def;

    this.serialNo=def.serial_no;

    this.category_of_nc_opt=def.category_of_nc;
    this.code_ref_of_nc_opt=def.code_ref_of_nc;
    this.mnc_nc_obs_opt=def.mnc_nc_obs;
    this.accept_revised_cap_by_auditor_opt=def.accept_revised_cap_by_auditor;
    this.root_cause_analysis_opt=def.root_cause_analysis;
    this.cause_opt=def.cause;
    this.status_opt=def.status;
    }
  
  deficiencyCreateForm = new FormGroup({
    serial_no: new FormControl(''),
    details_of_nc: new FormControl(''),
    corrective_action_plan: new FormControl(''),
    accept_cap_by_auditor: new FormControl(''),
    comments_by_auditor: new FormControl(''),
    ship_revised_by_cap: new FormControl(''),
    preventive_action: new FormControl(''),
    remarks: new FormControl(''), 
    error_check: new FormControl(''),
    name_of_auditor: new FormControl(''),
    target_date:new FormControl(''),
    close_date:new FormControl(''),
    audit_date:new FormControl(''),
    category_of_nc:new FormControl(''),
    code_ref_of_nc:new FormControl(''),
    mnc_nc_obs:new FormControl(''),
    accept_revised_cap_by_auditor:new FormControl(''),
    root_cause_analysis:new FormControl(''),
    cause:new FormControl(''),
    status:new FormControl(''),
    isChecked:new FormControl('')
  });




  deficiencyEditForm = new FormGroup({
    serial_no: new FormControl(''),
    details_of_nc: new FormControl(''),
    corrective_action_plan: new FormControl(''),
    accept_cap_by_auditor: new FormControl(''),
    comments_by_auditor: new FormControl(''),
    ship_revised_by_cap: new FormControl(''),
    preventive_action: new FormControl(''),
    remarks: new FormControl(''), 
    error_check: new FormControl(''),
    name_of_auditor: new FormControl(''),
    target_date:new FormControl(''),
    close_date:new FormControl(''),
    audit_date:new FormControl(''),
    category_of_nc:new FormControl(''),
    code_ref_of_nc:new FormControl(''),
    mnc_nc_obs:new FormControl(''),
    accept_revised_cap_by_auditor:new FormControl(''),
    root_cause_analysis:new FormControl(''),
    cause:new FormControl(''),
    status:new FormControl(''),
  });

  vesselInfoForm = new FormGroup({    
    vessel_name:new FormControl(''),
    imo_no:new FormControl(''),
    vessel_code:new FormControl(''),
    official_no:new FormControl(''),
  });

  auditInfoForm = new FormGroup({    
    auditCategoryInput:new FormControl(''),   
  });

  
  onSubmit() {
    this.deficiencyCreateForm.get('isChecked').setValue(false);
    console.warn(this.deficiencyCreateForm.value);
    // this.createDeficiency.push(this.deficiencyCreateForm.value);
     let nestedArray=[];
    nestedArray.push(this.deficiencyCreateForm.value);
    console.log("this.nestedArray");
    console.log(nestedArray);
    this.createDeficiency.push(nestedArray);
   console.log("this.createDeficiency")
   console.log( this.createDeficiency);
    localStorage.setItem("deficiencyObj",JSON.stringify(this.createDeficiency));
  //  console.log(JSON.parse(localStorage.getItem("deficiencyObj")));
    let def=JSON.parse(localStorage.getItem("deficiencyObj"));
    console.log(def);
    let latestObj:any;
    //-----------temp--------------------------------------------

    for(let i=def.length-1;i<def.length;i++){
      latestObj=def[i];
      this.deficiencyData.push(latestObj[latestObj.length-1]);
   //   console.log(this.deficiencyData);
      break;
    }    
    //-----------temp--------------------------------------------

    console.log("this.deficiencyData");
   console.log(this.deficiencyData);
   
    this.deficiencyCreateForm.reset();
  }



  onSubmitEdit() {
    alert(this.editIndex);
    let mainData1=JSON.parse(localStorage.getItem('deficiencyObj'));
    let mainData=mainData1.reverse();
    mainData[this.editIndex].push(this.deficiencyEditForm.value)    
    localStorage.setItem("deficiencyObj",JSON.stringify(mainData));
    let def:any[]=JSON.parse(localStorage.getItem("deficiencyObj"));   
    let latestObj=[];
     let myArr=[];
    for(let i=def.length;i>=0;i--){
     // console.log(latestObj.length);
      latestObj=def[i];
      console.log(def.length);  
     console.log(latestObj);     
      myArr.push(latestObj[latestObj.length-1]);          
    }
    // for(let i=0;i<def.length;i++){
    //     console.log('hi');
    //     latestObj=def[i];
    //     console.log(latestObj[latestObj.length-1]);     
    //     myArr.push(latestObj[latestObj.length-1]);          
    //   }
    console.log("1");
    console.log(myArr);
    this.deficiencyData=myArr;
    console.log("2");
    console.log(this.deficiencyData);    
    this.deficiencyEditForm.reset();
  }

  set(){
    alert("hi");
    console.log(this.selectedAuditCategoryValue);
    this.auditInfoForm.get('auditCategoryInput').setValue(this.selectedAuditCategoryValue);
  }
  onAuditInfoSubmit(){
    console.warn(this.auditInfoForm.value);
  }

  switchStatus(){
    return this.def_status;
  }
  defStat(stat){
    this.def_status=stat;
  }
 
  onDefHstry(){   
    let hstryData=JSON.parse(localStorage.getItem("deficiencyObj"));
    console.log("3");
    console.log(hstryData);
    let tempHstry=hstryData.reverse();
    console.log("4");
    console.log(tempHstry);
    this.defHstryData=tempHstry[this.editIndex];
    console.log("5");
    console.log(this.defHstryData);
  }

  selected(event) {
    alert(event.value);
    let target = event.source.selected._element.nativeElement;
    let selectedData = {
      value: event.value,
      text: target.innerText.trim()
    };
    alert(selectedData);
    console.log(selectedData);
  } 

 

 
  coderef_of_nc: CodeRefNC[] = [
    {value: 'C-4.5.2 Evaluation of compliance', viewValue: 'C-4.5.2 Evaluation of compliance'},
    {value: 'C-4.5.4 Control of records', viewValue: 'C-4.5.4 Control of records'},
    {value: 'C-4.3.3 Objectives, targets and programme(s)', viewValue: 'C-4.3.3 Objectives, targets and programme(s)'}
  ];

  categories_of_nc: CategoryOfNC[] = [
    {value: 'D01 Navigation Equipment', viewValue: 'D01 Navigation Equipment'},
    {value: 'D02 GMDSS Equipment', viewValue: 'D02 GMDSS Equipment'},
    {value: 'D03 Passage Plan', viewValue: 'D03 Passage Plan'},
    {value: 'D04 Charts & Publications', viewValue: 'D04 Charts & Publications'},
    {value: 'D05 Recordkeeping', viewValue: 'D05 Recordkeeping'},
    {value: 'D06 Procedure', viewValue: 'D06 Procedure'},
    {value: 'D07 Personal', viewValue: 'D07 Personal'},
    {value: 'D08 Others', viewValue: 'D08 Others'},
    {value: 'D09 Nil', viewValue: 'D09 Nil'}
  ];

  mnc_obs_nc:MncNcObs[]=[
    {value: 'MNC', viewValue: 'MNC'},
    {value: 'NC', viewValue: 'NC'},
    {value: 'OBS', viewValue: 'OBS'}
  ];

  accept_revised_by_cap:AcceptRevisedByCap[]=[
    {value:'YES',viewValue:'YES'},
    {value:'NO',viewValue:'NO'},
  ];

  root_cause_analysis:RootCauseAnalysis[]=[
    {value:'YES',viewValue:'YES'},
    {value:'NO',viewValue:'NO'},
  ];

  status:Status[]=[
    {value:'OPEN',viewValue:'OPEN'},
    {value:'CLOSE',viewValue:'CLOSE'},
  ];

  causes:Cause[]=[
    {value:'S1 Maintenance Deficiency',viewValue:'S1 Maintenance Deficiency'},
    {value:'S2 Improper Handling',viewValue:'S2 Improper Handling'},
    {value:'S3 Lack of Knowledge',viewValue:'S3 Lack of Knowledge'},
    {value:'S4 Negligence',viewValue:'S4 Negligence'},
    {value:'S5 Design Deficient',viewValue:'S5 Design Deficient'},
    {value:'S6 Material/Process',viewValue:'S6 Material/Process'},
    {value:'S7 Others',viewValue:'S7 Others'}
  ];
  //-------------constructor-------------------
  constructor(private login: LoginService,private electronService: ElectronService) {
    alert("constructor");
    alert(this.selectedAuditCategoryValue);

    }

    //-------------constructor-------------------


    //-------------ngOnInit-------------------

  ngOnInit() {

    alert("ngOnInit");
    

    //ipcRenderer DB request start
    if (this.electronService.isElectronApp) {
      this.electronService.ipcRenderer.send('get-audit-category-request')
    }
    //ipcRenderer DB request end 

    //ipcRenderer DB response start
    this.electronService.ipcRenderer.once('get-audit-category-response', (event, arg) => {
      console.log(arg)
      this.auditCategory=arg;
      for(let i=0;i<this.auditCategory.length;i++){
        console.log(this.auditCategory[i].CATEGORY_NAME);
        this.auditCategoryName.push(this.auditCategory[i].CATEGORY_NAME);

      }
      console.log(this.auditCategoryName);
    })
      //ipcRenderer DB response end

  //ipcRenderer DB request start
    if (this.electronService.isElectronApp) {
        var param = [];
        param.push(1)
        this.electronService.ipcRenderer.send('find-vessel-info-request',param)
     }
  //ipcRenderer DB request end  


  //ipcRenderer DB response start


  this.electronService.ipcRenderer.once('find-vessel-info-response', (event, arg) => {
      console.log(arg)
      this.vesselInfo=arg;
     
  this.vesselInfoForm.get('imo_no').setValue(this.vesselInfo[0].IMO_NUMBER);
  this.vesselInfoForm.get('vessel_name').setValue(this.vesselInfo[0].VESSEL_NAME);
  this.vesselInfoForm.get('vessel_code').setValue(this.vesselInfo[0].VESSEL_CODE);
  this.vesselInfoForm.get('official_no').setValue(this.vesselInfo[0].OFFICIAL_NUMBER);
    
     
    
  })

  //ipcRenderer DB response end
  
   // this.defStatus="CLOSE";
    this.def_status="OPEN";
   //this.flag=true;
    this.login.currentUser.subscribe(loggedInUser => this.loggedInUser = loggedInUser);
    let defObj1=JSON.parse(localStorage.getItem("deficiencyObj"));    
    console.log(defObj1);
  
    this.createDeficiency=[
      [{
      serial_no: "SPANAV001",
      details_of_nc: "Radar acceptable PM range value was not entered in Radar logBook",
      corrective_action_plan: "Radar log specification page filled properly & Radar acceptable PM range entered",
      accept_cap_by_auditor: "NA",
      comments_by_auditor: "Radar log specification page to be verified by New joined officer",
      ship_revised_by_cap: "NA",
      preventive_action: "Radar log specification page to be verified by New joined officer",
      remarks: "NA", 
      error_check: "NA",
      name_of_auditor: "Tr C/Off Kundan Kumar",
      target_date:new Date(),
      close_date:new Date(),
      audit_date:new Date(),
      category_of_nc:"D01 Navigation Equipment",
      code_ref_of_nc:"C-4.5.2 Evaluation of compliance",
      mnc_nc_obs:"MNC",
      accept_revised_cap_by_auditor:"YES",
      root_cause_analysis:"YES",
      cause:"S7 Others",
      status:"OPEN",
    }],
    [{
      serial_no: "SPANAV002",
      details_of_nc: "Radar acceptable PM range value was not entered in Radar logBook",
      corrective_action_plan: "Radar log specification page filled properly & Radar acceptable PM range entered",
      accept_cap_by_auditor: "NA",
      comments_by_auditor: "Radar log specification page to be verified by New joined officer",
      ship_revised_by_cap: "NA",
      preventive_action: "Radar log specification page to be verified by New joined officer",
      remarks: "NA", 
      error_check: "NA",
      name_of_auditor: "Tr C/Off Kundan Kumar",
      target_date:new Date(),
      close_date:new Date(),
      audit_date:new Date(),
      category_of_nc:"D01 Navigation Equipment",
      code_ref_of_nc:"C-4.5.2 Evaluation of compliance",
      mnc_nc_obs:"MNC",
      accept_revised_cap_by_auditor:"YES",
      root_cause_analysis:"YES",
      cause:"S7 Others",
      status:"CLOSE",
      isChecked:false
    }],
    [{
      serial_no: "SPANAV003",
      details_of_nc: "Radar acceptable PM range value was not entered in Radar logBook",
      corrective_action_plan: "Radar log specification page filled properly & Radar acceptable PM range entered",
      accept_cap_by_auditor: "NA",
      comments_by_auditor: "Radar log specification page to be verified by New joined officer",
      ship_revised_by_cap: "NA",
      preventive_action: "Radar log specification page to be verified by New joined officer",
      remarks: "NA", 
      error_check: "NA",
      name_of_auditor: "Tr C/Off Kundan Kumar",
      target_date:new Date(),
      close_date:new Date(),
      audit_date:new Date(),
      category_of_nc:"D01 Navigation Equipment",
      code_ref_of_nc:"C-4.5.2 Evaluation of compliance",
      mnc_nc_obs:"VVVV",
      accept_revised_cap_by_auditor:"YES",
      root_cause_analysis:"YES",
      cause:"S7 Others",
      status:"OPEN",
      isChecked:false
    },
    {
      serial_no: "SPANAV003",
      details_of_nc: "Radar acceptable PM range value was not entered in Radar logBook",
      corrective_action_plan: "Radar log specification page filled properly & Radar acceptable PM range entered",
      accept_cap_by_auditor: "NA",
      comments_by_auditor: "Radar log specification page to be verified by New joined officer",
      ship_revised_by_cap: "NA",
      preventive_action: "Radar log specification page to be verified by New joined officer",
      remarks: "NA", 
      error_check: "NA",
      name_of_auditor: "Tr C/Off Kundan Kumar",
      target_date:new Date(),
      close_date:new Date(),
      audit_date:new Date(),
      category_of_nc:"D01 Navigation Equipment",
      code_ref_of_nc:"C-4.5.2 Evaluation of compliance",
      mnc_nc_obs:"OBS",
      accept_revised_cap_by_auditor:"YES",
      root_cause_analysis:"YES",
      cause:"S7 Others",
      status:"OPEN",
      isChecked:false
    }]];

    localStorage.setItem("deficiencyObj",JSON.stringify(this.createDeficiency));
    let defObj=JSON.parse(localStorage.getItem("deficiencyObj"));    
    let sam:any;
    for(let i=0;i<defObj.length;i++){
      sam=defObj[i];
       // console.log(sam);
        this.deficiencyData.push(sam[sam.length-1]);
        //console.log( this.deficiencyData);
      
     }
    //  console.log(defObj);
    //  let reverseArr=defObj.reverse();
    //  console.log(reverseArr);
    //  for(let i=0;i<reverseArr.length;i++){
    //   sam=defObj[i];
    //    // console.log(sam);
    //     this.deficiencyData.push(sam[sam.length-1]);
    //     //console.log( this.deficiencyData);
      
    //  }
      console.log( this.deficiencyData);
      
  }



   //-------------ngOnInIt-------------------



  ngAfterViewInit() {
  //  alert("ngAfterViewInit");
    
    this.auditCategoryModal.show();
   // console.log(this.selectedAuditCategoryValue);
  }

}
