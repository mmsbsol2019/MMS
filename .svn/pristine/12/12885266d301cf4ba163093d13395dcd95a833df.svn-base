import { ElectronService } from 'ngx-electron';
import { NgModule } from '@angular/core';
@NgModule({})
export class IpcCal {
    constructor(private electronService: ElectronService) {

    }
    loginValidation(param) {
        //ipcRenderer DB request start
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('check-username-password-request', param)
        }
        //ipcRenderer DB request end
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('check-username-password-response', (event, arg) => {
                if (arg[0].isAvail == 0) {
                    resolve('true')
                }
                else {
                    resolve('false')
                }

            })
        })
        //ipcRenderer DB response end
    }

    onSaveAuditInfo(param) {
        if (this.electronService.isElectronApp) {

            this.electronService.ipcRenderer.send('get-deficiency-data-request', param)
        }
        //ipcRenderer DB request end 
        return new Promise((resolve, reject) => {
            //ipcRenderer DB response start
            this.electronService.ipcRenderer.once('get-deficiency-data-response', (event, arg) => {
                resolve(arg)
            })
        })
        //ipcRenderer DB response end
    }
    //ipcRenderer DB request start

    onLoadCreateDefAuditCat() {
        //ipcRenderer DB request start
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('get-audit-category-request')
        }
        //ipcRenderer DB request end 

        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('get-audit-category-response', (event, arg) => {
                resolve(arg)

            })
        })
        //ipcRenderer DB response end
    }
    onLoadCreateDefVesselInfo() {

        //ipcRenderer DB request start
        if (this.electronService.isElectronApp) {
            var param = [];
            param.push(1)
            this.electronService.ipcRenderer.send('find-vessel-info-request', param)
        }
        //ipcRenderer DB request end  


        //ipcRenderer DB response start

        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('find-vessel-info-response', (event, arg) => {
                resolve(arg)

            })
        })
    }

    onGetHistory(company_id,deficiency_id){
        //ipcRenderer DB request start
        var param=[company_id,deficiency_id];
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('find-deficiency-history-request',param)
        }
        //ipcRenderer DB request end  
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('find-deficiency-history-response', (event, arg) => {
                resolve(arg)

            })
        })
    }

    onCreateNewDef(company_id,newDefData){
        //ipcRenderer DB request start
        var param=[company_id,newDefData];
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('save-deficiency-data-request',param)
        }
        //ipcRenderer DB request end  
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('save-deficiency-data-response', (event, arg) => {
                resolve(arg)
            })
        })

    }

}