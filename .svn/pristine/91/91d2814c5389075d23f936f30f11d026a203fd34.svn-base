import { ElectronService } from 'ngx-electron';
import { NgModule } from '@angular/core';
@NgModule({})
export class IpcCal {
    constructor(private electronService: ElectronService) {

    }
    loginValidation(param) {
        //ipcRenderer DB request start
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('check-username-password-request', param)
        }
        //ipcRenderer DB request end
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('check-username-password-response', (event, arg) => {
                if (arg[0].isAvail == 1) {
                    resolve('true')
                }
                else {
                    resolve('false')
                }

            })
        })
        //ipcRenderer DB response end
    }
    userDetails(param) {
        //ipcRenderer DB request start
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('get-user-details-request', param)
        }
        //ipcRenderer DB request end
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('get-user-details-response', (event, arg) => {
                
                    resolve(arg[0])
                

            })
        })
        //ipcRenderer DB response end
    }

    onSaveAuditInfo(param) {
        if (this.electronService.isElectronApp) {

            this.electronService.ipcRenderer.send('get-deficiency-data-request', param)
        }
        //ipcRenderer DB request end 
        return new Promise((resolve, reject) => {
            //ipcRenderer DB response start
            this.electronService.ipcRenderer.once('get-deficiency-data-response', (event, arg) => {
                resolve(arg)
            })
        })
        //ipcRenderer DB response end
    }
    //ipcRenderer DB request start

    onLoadCreateDefAuditCat(param) {
        //ipcRenderer DB request start
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('get-audit-category-request',param)
        }
        //ipcRenderer DB request end 

        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('get-audit-category-response', (event, arg) => {
                resolve(arg)

            })
        })
        //ipcRenderer DB response end
    }
    onLoadCreateDefVesselInfo(param) {

        //ipcRenderer DB request start
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('find-vessel-info-request', param)
        }
        //ipcRenderer DB request end  


        //ipcRenderer DB response start

        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('find-vessel-info-response', (event, arg) => {
                resolve(arg)

            })
        })
    }

    onGetHistory(param){
        //ipcRenderer DB request start
       
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('find-deficiency-history-request',param)
        }
        //ipcRenderer DB request end  
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('find-deficiency-history-response', (event, arg) => {
                resolve(arg)

            })
        })
    }

    onCreateNewDef(param,findData){
        //ipcRenderer DB request start
       
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('save-deficiency-data-request',param,findData)
        }
        //ipcRenderer DB request end  
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('save-deficiency-data-response', (event, arg) => {
                resolve(arg)
            })
        })

    }

    onEditDef(param,findData){
        //ipcRenderer DB request start
       
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('update-deficiency-data-request',param,findData)
        }
        //ipcRenderer DB request end  
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('update-deficiency-data-response', (event, arg) => {
                resolve(arg)
            })
        })

    }

    onCreateModelWin(param,paramAuditCode){
        //ipcRenderer DB request start
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('get-deficiency-master-data-request',param,paramAuditCode)
        }
        //ipcRenderer DB request end  
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('get-deficiency-master-data-response', (event, arg) => {
                resolve(arg)
            })
        })

    }

    getTxnNumber(param){
        // console.log(defId)
        // console.log(cmnyCatInterId)
        // var param=cmnyCatInterId.push(defId)
        if (this.electronService.isElectronApp) {
            console.log('=======param txn==============')
                console.log(param)
                console.log('=====================')
            this.electronService.ipcRenderer.send('get-def-txnMax-request',param)
        }
        //ipcRenderer DB request end  
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('get-def-txnMax-response', (event, arg) => {
                console.log('=====================')
                console.log(arg)
                console.log(arg[0].TXN)
                console.log('=====================')
                resolve(arg[0].TXN)
            })
        })

    }

    onDeleteDef(param,findData){
        //ipcRenderer DB request start
        if (this.electronService.isElectronApp) {
            this.electronService.ipcRenderer.send('delete-deficiency-data-request',param,findData)
        }
        //ipcRenderer DB request end  
        //ipcRenderer DB response start
        return new Promise((resolve, reject) => {
            this.electronService.ipcRenderer.once('delete-deficiency-data-response', (event, arg) => {
                resolve(arg)
            })
        })

    }

}